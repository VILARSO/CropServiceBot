import re
import os
import asyncio
import logging
from datetime import datetime, timedelta
from pymongo import MongoClient # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ MongoDB
from pymongo.errors import ConnectionFailure, OperationFailure

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils import executor
from aiogram.utils.exceptions import BadRequest, TelegramAPIError, MessageNotModified, MessageToDeleteNotFound

# ======== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ========
API_TOKEN = os.getenv('API_TOKEN')
if not API_TOKEN:
    print("‚ùå API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ API_TOKEN.")
    exit(1)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MongoDB URI
# Railway —á–∞—Å—Ç–æ –Ω–∞–¥–∞—î MONGO_URL –∞–±–æ DATABASE_URL –¥–ª—è MongoDB
MONGO_URI = os.getenv('MONGO_URL') or os.getenv('DATABASE_URL')
if not MONGO_URI:
    print("‚ùå MONGO_URL –∞–±–æ DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB.")
    exit(1)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.getLogger().addHandler(logging.StreamHandler())

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ======== –§–∞–π–ª–∏ (–≤–∏–¥–∞–ª—è—î–º–æ JSON, –¥–æ–¥–∞—î–º–æ DB) ========
ANALYTICS_FILE = 'analytics.log' # –ó–∞–ª–∏—à–∞—î–º–æ –¥–ª—è –ª–æ–≥—ñ–≤ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏

# ======== –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB ========
mongo_client = None
db = None
posts_collection = None

def init_mongo_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB —Ç–∞ –æ—Ç—Ä–∏–º—É—î –∫–æ–ª–µ–∫—Ü—ñ—é posts."""
    global mongo_client, db, posts_collection
    try:
        mongo_client = MongoClient(MONGO_URI)
        db = mongo_client.get_default_database() # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ URI
        posts_collection = db.posts # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é "posts"
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
        mongo_client.admin.command('ping') 
        logging.info("Successfully connected to MongoDB!")
    except ConnectionFailure as e:
        logging.error(f"Could not connect to MongoDB: {e}")
        exit(1)
    except Exception as e:
        logging.error(f"An unexpected error occurred during MongoDB initialization: {e}")
        exit(1)

# –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
init_mongo_db()

# ======== –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó ========
CATEGORIES = [
    ("üî® –†–µ–º–æ–Ω—Ç —ñ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ", "–†–µ–º–æ–º–µ–Ω—Ç —ñ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ"),
    ("üßπ –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è —ñ –ø–æ–±—É—Ç–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞", "–ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è —ñ –ø–æ–±—É—Ç–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞"),
    ("üöö –ö—É—Ä‚Äô—î—Ä—Å—å–∫—ñ —Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "–ö—É—Ä‚Äô—î—Ä—Å—å–∫—ñ —Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏"),
    ("üêæ –î–æ–ø–æ–º–æ–≥–∞ –∑ —Ç–≤–∞—Ä–∏–Ω–∞–º–∏", "–î–æ–ø–æ–º–æ–≥–∞ –∑ —Ç–≤–∞—Ä–∏–Ω–∞–º–∏"),
    ("üíª IT —Ç–∞ —Ü–∏—Ñ—Ä–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏", "IT —Ç–∞ —Ü–∏—Ñ—Ä–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏"),
    ("üéì –û—Å–≤—ñ—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏", "–û—Å–≤—ñ—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏"),
    ("üíÖ –ö—Ä–∞—Å–∞ —Ç–∞ –∑–¥–æ—Ä–æ–≤‚Äô—è", "–ö—Ä–∞—Å–∞ —Ç–∞ –∑–¥–æ—Ä–æ–≤‚Äô—è"),
    ("üéâ –ü–æ–¥—ñ—ó —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞ –Ω–∞ –∑–∞—Ö–æ–¥–∞—Ö", "–ü–æ–¥—ñ—ó —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞ –Ω–∞ –∑–∞—Ö–æ–¥–∞—Ö"),
    ("‚ùÑÔ∏è/üåø –°–µ–∑–æ–Ω–Ω–∞/—Ä–∞–∑–æ–≤–∞ —Ä–æ–±–æ—Ç–∞", "–°–µ–∑–æ–Ω–Ω–∞/—Ä–∞–∑–æ–≤–∞ —Ä–æ–±–æ—Ç–∞"),
    ("üì¶ –Ü–Ω—à–µ", "–Ü–Ω—à–µ"),
]

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –µ–º–æ–¥–∂—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –Ω–∞–∑–≤–æ—é
CATEGORY_EMOJIS = {name: emoji for emoji, name in CATEGORIES}

# –¢–µ–º–∞—Ç–∏—á–Ω—ñ –µ–º–æ–¥–∂—ñ –¥–ª—è —Ç–∏–ø—É "–†–æ–±–æ—Ç–∞" —Ç–∞ "–ü–æ—Å–ª—É–≥–∞"
TYPE_EMOJIS = {
    "—Ä–æ–±–æ—Ç–∞": "üíº",
    "–ø–æ—Å–ª—É–≥–∞": "ü§ù"
}


# ======== FSM —Å—Ç–∞–Ω–∏ ========
class AppStates(StatesGroup):
    MAIN_MENU = State() # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    ADD_TYPE = State()
    ADD_CAT = State()
    ADD_DESC = State()
    ADD_CONT = State()
    ADD_CONFIRM = State()

    VIEW_CAT = State()
    VIEW_LISTING = State() # –¶–µ–π —Å—Ç–∞–Ω —Ç–µ–ø–µ—Ä –∑–Ω–æ–≤—É –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∑–∞–≥–∞–ª—å–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
    
    MY_POSTS_VIEW = State()
    EDIT_DESC = State()


# ======== –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ (MongoDB) ========

def log_event(text):
    """–õ–æ–≥—É—î –ø–æ–¥—ñ—ó —É —Ñ–∞–π–ª –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏."""
    try:
        with open(ANALYTICS_FILE, 'a', encoding='utf-8') as f:
            f.write(f"[{datetime.now().isoformat()}] {text}\n")
    except Exception as e:
        logging.error(f"Error logging event to {ANALYTICS_FILE}: {e}")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ—Å—Ç–∞–º–∏ –≤ MongoDB
def add_post_to_db(post_data):
    """–î–æ–¥–∞—î –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö MongoDB."""
    try:
        result = posts_collection.insert_one(post_data)
        return str(result.inserted_id) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ID —è–∫ —Ä—è–¥–æ–∫
    except OperationFailure as e:
        logging.error(f"MongoDB operation failed when adding post: {e}")
        return None
    except Exception as e:
        logging.error(f"Error adding post to MongoDB: {e}")
        return None

def get_posts_from_db():
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö MongoDB."""
    try:
        posts = list(posts_collection.find().sort("created_at", -1))
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ObjectId –Ω–∞ —Ä—è–¥–æ–∫ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        for post in posts:
            if '_id' in post:
                post['id'] = str(post['_id'])
        return posts
    except OperationFailure as e:
        logging.error(f"MongoDB operation failed when getting posts: {e}")
        return []
    except Exception as e:
        logging.error(f"Error getting posts from MongoDB: {e}")
        return []

def get_post_by_id_from_db(post_id):
    """–û—Ç—Ä–∏–º—É—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–∞ ID."""
    from bson.objectid import ObjectId # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—É—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫—Ä—É–≥–æ–≤–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    try:
        post = posts_collection.find_one({"_id": ObjectId(post_id)})
        if post:
            post['id'] = str(post['_id']) # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ObjectId –Ω–∞ —Ä—è–¥–æ–∫
        return post
    except OperationFailure as e:
        logging.error(f"MongoDB operation failed when getting post by ID: {e}")
        return None
    except Exception as e:
        logging.error(f"Error getting post by ID from MongoDB: {e}")
        return None

def update_post_description_in_db(post_id, new_description):
    """–û–Ω–æ–≤–ª—é—î –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–∞ ID."""
    from bson.objectid import ObjectId
    try:
        result = posts_collection.update_one(
            {"_id": ObjectId(post_id)},
            {"$set": {"description": new_description}}
        )
        return result.modified_count > 0
    except OperationFailure as e:
        logging.error(f"MongoDB operation failed when updating post description: {e}")
        return False
    except Exception as e:
        logging.error(f"Error updating post description in MongoDB: {e}")
        return False

def delete_post_from_db(post_id, user_id):
    """–í–∏–¥–∞–ª—è—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–∞ ID, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ user_id."""
    from bson.objectid import ObjectId
    try:
        result = posts_collection.delete_one(
            {"_id": ObjectId(post_id), "user_id": user_id}
        )
        return result.deleted_count > 0
    except OperationFailure as e:
        logging.error(f"MongoDB operation failed when deleting post: {e}")
        return False
    except Exception as e:
        logging.error(f"Error deleting post from MongoDB: {e}")
        return False

def can_edit(post):
    created = datetime.fromisoformat(post['created_at'])
    return datetime.utcnow() - created < timedelta(minutes=15)

# ======== –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è MarkdownV2 —Å–∏–º–≤–æ–ª—ñ–≤ ========
def escape_markdown_v2(text: str) -> str:
    """
    –ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ MarkdownV2 –≤ —Ç–µ–∫—Å—Ç—ñ,
    —è–∫—ñ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É–≤–∞—Ç–∏—Å—è —è–∫ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
    """
    if not isinstance(text, str):
        text = str(text) 
    
    # –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ MarkdownV2, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è
    # https://core.telegram.org/bots/api#markdownv2-style
    special_chars = r'_*[]()~`>#+-=|{}.!' 
    
    for char in special_chars:
        text = text.replace(char, '\\' + char)
    return text

# ======== –ö–Ω–æ–ø–∫–∏ ========
def main_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏", callback_data="add_post"),
        InlineKeyboardButton("üîç –ü–æ—à—É–∫", callback_data="view_posts"),
        InlineKeyboardButton("üóÇÔ∏è –ú–æ—ó", callback_data="my_posts"),
        InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help"),
    )
    return kb

def back_kb():
    kb = InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–≤–∂–¥–∏ –≤–Ω–∏–∑—É
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_prev_step")) 
    return kb

def type_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–†–æ–±–æ—Ç–∞", callback_data="type_work"),
        InlineKeyboardButton("–ü–æ—Å–ª—É–≥–∞", callback_data="type_service"),
    )
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é" –≤–Ω–∏–∑—É
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_main_menu"))
    return kb

def cat_kb(is_post_creation=True):
    kb = InlineKeyboardMarkup(row_width=1)
    for i, (lbl, _) in enumerate(CATEGORIES):
        cb = f"{'post' if is_post_creation else 'view'}_cat_{i}"
        kb.add(InlineKeyboardButton(lbl, callback_data=cb))
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–≤–∂–¥–∏ –≤–Ω–∏–∑—É
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_prev_step")) 
    return kb

def contact_kb():
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚ùé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_cont"),
    )
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–≤–∂–¥–∏ –≤–Ω–∏–∑—É
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_prev_step"))
    return kb

# ======== –°—Ç–∞—Ä—Ç ========
WELCOME_MESSAGE = (
    "üëã –ü—Ä–∏–≤—ñ—Ç\\! –Ø CropServiceBot ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—é –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø—ñ–¥—Ä–æ–±—ñ—Ç–∫–∏ –∞–±–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ —É —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ\\.\n\n"
    "‚ûï \\‚Äî –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
    "üîç \\‚Äî –ü–æ—à—É–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å\n"
    "üóÇÔ∏è \\‚Äî –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
    "‚ùì \\‚Äî –î–æ–ø–æ–º–æ–≥–∞"
)

# –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–ª—è "–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
MY_POSTS_PER_PAGE = 5 
# –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–ª—è "–ü–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å"
VIEW_POSTS_PER_PAGE = 5 # –ú–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞ 7 –∞–±–æ 10

# ==== –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ====
async def update_or_send_interface_message(chat_id: int, state: FSMContext, text: str, reply_markup: InlineKeyboardMarkup = None, parse_mode: str = None, disable_web_page_preview: bool = False):
    """
    –†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î –Ω–æ–≤–µ, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î.
    –ó–±–µ—Ä—ñ–≥–∞—î message_id –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ —É —Å—Ç–∞–Ω—ñ.
    """
    data = await state.get_data()
    last_bot_message_id = data.get('last_bot_message_id')

    try:
        if last_bot_message_id:
            # –°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=last_bot_message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview
            )
            logging.info(f"Edited existing interface message for user {chat_id}. Message ID: {last_bot_message_id}")
        else:
            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î —ñ—Å–Ω—É—é—á–æ–≥–æ
            new_msg = await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview
            )
            await state.update_data(last_bot_message_id=new_msg.message_id)
            logging.info(f"Sent new interface message for user {chat_id}. Message ID: {new_msg.message_id}")
    except MessageNotModified:
        # –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è, —è–∫—â–æ —Ç–µ–∫—Å—Ç –∞–±–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è
        logging.info(f"Message not modified for user {chat_id}. Message ID: {last_bot_message_id}")
    except (MessageToDeleteNotFound, BadRequest) as e:
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ —î —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
        logging.warning(f"Failed to edit message {last_bot_message_id} for user {chat_id} (Error: {e}). Sending new message.")
        new_msg = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview
        )
        await state.update_data(last_bot_message_id=new_msg.message_id)
        logging.info(f"Sent new interface message (after edit failure) for user {chat_id}. Message ID: {new_msg.message_id}")
    except Exception as e:
        logging.error(f"Unexpected error in update_or_send_interface_message for user {chat_id}: {e}", exc_info=True)
        # –£ –≤–∏–ø–∞–¥–∫—É –±—É–¥—å-—è–∫–æ—ó —ñ–Ω—à–æ—ó –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç
        new_msg = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview
        )
        await state.update_data(last_bot_message_id=new_msg.message_id)
        logging.info(f"Sent new interface message (after unexpected error) for user {chat_id}. Message ID: {new_msg.message_id}")


# ==== –§—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ—Ö–æ–¥—É ====
async def go_to_main_menu(chat_id: int, state: FSMContext):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –æ–Ω–æ–≤–ª—é—é—á–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    logging.info(f"User {chat_id} going to main menu.")
    await update_or_send_interface_message(chat_id, state, WELCOME_MESSAGE, main_kb(), parse_mode='MarkdownV2')
    await state.set_state(AppStates.MAIN_MENU)


@dp.message_handler(commands=['start'], state="*")
async def on_start(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} started bot.")
    
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É /start, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞
        await msg.delete() 
    except Exception as e:
        logging.warning(f"Failed to delete /start command: {e}")
    
    # –°–∫–∏–¥–∞—î–º–æ last_bot_message_id –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ, —â–æ–± –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await state.update_data(last_bot_message_id=None)
    await go_to_main_menu(msg.chat.id, state)


@dp.callback_query_handler(lambda c: c.data == 'go_back_to_main_menu', state='*')
async def on_back_to_main(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} pressed 'Go Back to Main Menu'.")
    await call.answer()
    await go_to_main_menu(call.message.chat.id, state)


@dp.callback_query_handler(lambda c: c.data == 'go_back_to_prev_step', state='*')
async def on_back_to_prev_step(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} pressed 'Go Back to Previous Step'.")
    await call.answer()
    current_state = await state.get_state()
    chat_id = call.message.chat.id
    
    if current_state == AppStates.ADD_TYPE.state:
        await go_to_main_menu(chat_id, state)
    elif current_state == AppStates.ADD_CAT.state:
        await update_or_send_interface_message(chat_id, state, "üîπ –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:", type_kb())
        await state.set_state(AppStates.ADD_TYPE)
    elif current_state == AppStates.ADD_DESC.state:
        await update_or_send_interface_message(chat_id, state, "üóÇÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", cat_kb(is_post_creation=True))
        await state.set_state(AppStates.ADD_CAT)
    elif current_state == AppStates.ADD_CONT.state:
        await update_or_send_interface_message(chat_id, state, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb())
        await state.set_state(AppStates.ADD_DESC)
    elif current_state == AppStates.ADD_CONFIRM.state:
        await update_or_send_interface_message(chat_id, state, "üìû –í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ):", contact_kb())
        await state.set_state(AppStates.ADD_CONT)
    elif current_state == AppStates.VIEW_CAT.state:
        await go_to_main_menu(chat_id, state)
    elif current_state == AppStates.VIEW_LISTING.state:
        # –î–ª—è VIEW_LISTING –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        await update_or_send_interface_message(chat_id, state, "üîé –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", cat_kb(is_post_creation=False))
        await state.set_state(AppStates.VIEW_CAT)
    elif current_state == AppStates.MY_POSTS_VIEW.state:
        await go_to_main_menu(chat_id, state) 
    elif current_state == AppStates.EDIT_DESC.state:
        data = await state.get_data()
        await show_my_posts_page(chat_id, state, data.get('offset', 0)) # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç—ñ—î—ó –∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        await state.set_state(AppStates.MY_POSTS_VIEW)
    else:
        await go_to_main_menu(chat_id, state)

# ======== –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å ========
@dp.callback_query_handler(lambda c: c.data == 'add_post', state=[AppStates.MAIN_MENU, AppStates.MY_POSTS_VIEW])
async def add_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiated 'Add Post'.")
    await call.answer()
    await update_or_send_interface_message(call.message.chat.id, state, "üîπ –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:", type_kb())
    await state.set_state(AppStates.ADD_TYPE)

@dp.callback_query_handler(lambda c: c.data.startswith('type_'), state=AppStates.ADD_TYPE)
async def add_type(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} selected post type: {call.data}.")
    await call.answer()
    typ = '—Ä–æ–±–æ—Ç–∞' if call.data == 'type_work' else '–ø–æ—Å–ª—É–≥–∞'
    await state.update_data(type=typ)
    await update_or_send_interface_message(call.message.chat.id, state, "üóÇÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", cat_kb(is_post_creation=True))
    await state.set_state(AppStates.ADD_CAT)

@dp.callback_query_handler(lambda c: c.data.startswith('post_cat_'), state=AppStates.ADD_CAT)
async def add_cat(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2])
    _, cat = CATEGORIES[idx]
    logging.info(f"User {call.from_user.id} selected category: {cat}.")
    await call.answer()
    await state.update_data(category=cat)
    await update_or_send_interface_message(call.message.chat.id, state, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb())
    await state.set_state(AppStates.ADD_DESC)

@dp.message_handler(state=AppStates.ADD_DESC)
async def add_desc(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} entered description.")
    text = msg.text.strip()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —Ü–µ –Ω–µ –∑–∞–≤–∞–∂–∞—î –≤—ñ–∑—É–∞–ª—å–Ω–æ
    try:
        await msg.delete()
    except MessageToDeleteNotFound:
        pass

    if not text:
        return await update_or_send_interface_message(msg.chat.id, state, "‚ùå –û–ø–∏—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º\\. –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb(), parse_mode='MarkdownV2')
    if len(text) > 300:
        return await update_or_send_interface_message(msg.chat.id, state, f"‚ùå –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π \\({len(text)}/300\\)\\. –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb(), parse_mode='MarkdownV2')
    
    await state.update_data(desc=text)
    await update_or_send_interface_message(msg.chat.id, state, "üìû –í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ):", contact_kb())
    await state.set_state(AppStates.ADD_CONT)

@dp.callback_query_handler(lambda c: c.data == 'skip_cont', state=AppStates.ADD_CONT)
async def skip_cont(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} skipped contact info.")
    await call.answer()
    await state.update_data(cont="")
    data = await state.get_data()
    
    type_emoji = TYPE_EMOJIS.get(data['type'], '') # –û—Ç—Ä–∏–º—É—î–º–æ –µ–º–æ–¥–∂—ñ –¥–ª—è —Ç–∏–ø—É
    
    summary = (
        f"üîé \\*–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\\*\n"
        f"{escape_markdown_v2(type_emoji)} **{escape_markdown_v2(data['type'].capitalize())}** \\| **{escape_markdown_v2(data['category'])}**\n"
        f"üîπ {escape_markdown_v2(data['desc'])}\n"
        f"üìû \\_–Ω–µ–º–∞—î\\_"
    )
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_add_post"),
    )
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–≤–∂–¥–∏ –≤–Ω–∏–∑—É
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_prev_step"))
    await update_or_send_interface_message(call.message.chat.id, state, summary, kb, parse_mode='MarkdownV2')
    await state.set_state(AppStates.ADD_CONFIRM)

@dp.message_handler(state=AppStates.ADD_CONT)
async def add_cont(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} entered contact info.")
    text = msg.text.strip()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —Ü–µ –Ω–µ –∑–∞–≤–∞–∂–∞—î –≤—ñ–∑—É–∞–ª—å–Ω–æ
    try:
        await msg.delete()
    except MessageToDeleteNotFound:
        pass

    if not text:
        return await update_or_send_interface_message(msg.chat.id, state, "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º\\. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å\\.", contact_kb(), parse_mode='MarkdownV2')
    
    # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    # –î–æ–∑–≤–æ–ª—è—î —Ñ–æ—Ä–º–∞—Ç–∏:
    #   - 0XXXXXXXXX (10 —Ü–∏—Ñ—Ä, –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0)
    #   - +380XXXXXXXXX (12 —Ü–∏—Ñ—Ä, –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ +380)
    #   - @username (username Telegram)
    phone_pattern = r'^(?:0\d{9}|\+380\d{9}|@[a-zA-Z0-9_]{5,32})$'

    if not re.fullmatch(phone_pattern, text):
        logging.warning(f"User {msg.from_user.id} entered invalid contact format: '{text}'")
        return await update_or_send_interface_message(
            msg.chat.id, state,
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç\\. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ \\+380XXXXXXXXX –∞–±–æ 0XXXXXXXXX, –∞–±–æ username Telegram \\(@username\\)\\.",
            contact_kb(), parse_mode='MarkdownV2'
        )
    
    await state.update_data(cont=text)
    data = await state.get_data()
    
    type_emoji = TYPE_EMOJIS.get(data['type'], '') # –û—Ç—Ä–∏–º—É—î–º–æ –µ–º–æ–¥–∂—ñ –¥–ª—è —Ç–∏–ø—É

    summary = (
        f"üîé \\*–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\\*\n"
        f"{escape_markdown_v2(type_emoji)} **{escape_markdown_v2(data['type'].capitalize())}** \\| **{escape_markdown_v2(data['category'])}**\n"
        f"üîπ {escape_markdown_v2(data['desc'])}\n"
        f"üìû {escape_markdown_v2(data['cont'])}"
    )
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_add_post"),
    )
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–≤–∂–¥–∏ –≤–Ω–∏–∑—É
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_prev_step"))
    await update_or_send_interface_message(msg.chat.id, state, summary, kb, parse_mode='MarkdownV2')
    await state.set_state(AppStates.ADD_CONFIRM)

@dp.callback_query_handler(lambda c: c.data == 'confirm_add_post', state=AppStates.ADD_CONFIRM)
async def add_confirm(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} confirmed post creation.")
    await call.answer()
    d = await state.get_data()
    
    usr = call.from_user.username or str(call.from_user.id)

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º (–ø–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
    contact_info = d.get('cont', "")
    if contact_info:
        phone_pattern = r'^(?:0\d{9}|\+380\d{9}|@[a-zA-Z0-9_]{5,32})$'
        if not re.fullmatch(phone_pattern, contact_info):
            logging.error(f"Invalid contact format somehow slipped through for user {call.from_user.id}: {contact_info}")
            await update_or_send_interface_message(
                call.message.chat.id, state,
                "‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç—É\\. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.",
                main_kb(), parse_mode='MarkdownV2'
            )
            await state.set_state(AppStates.MAIN_MENU)
            return

    post_data = {
        'user_id': call.from_user.id, 
        'username': usr,
        'type': d['type'], 
        'category': d['category'], 
        'description': d['desc'],
        'contacts': contact_info, 
        'created_at': datetime.utcnow().isoformat()
    }
    
    pid = add_post_to_db(post_data) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
    if pid:
        log_event(f"Added {pid}")
        await update_or_send_interface_message(call.message.chat.id, state, "‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ\\!", parse_mode='MarkdownV2') 
        await show_my_posts_page(call.message.chat.id, state, 0) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –º–æ—ó—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
        await state.set_state(AppStates.MY_POSTS_VIEW)
    else:
        await update_or_send_interface_message(call.message.chat.id, state, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)


# ======== –ü–µ—Ä–µ–≥–ª—è–¥ –æ–≥–æ–ª–æ—à–µ–Ω—å (–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó) ========
@dp.callback_query_handler(lambda c: c.data == 'view_posts', state=AppStates.MAIN_MENU)
async def view_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiated 'View Posts'.")
    await call.answer()
    await update_or_send_interface_message(call.message.chat.id, state, "üîé –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", cat_kb(is_post_creation=False))
    await state.set_state(AppStates.VIEW_CAT)

@dp.callback_query_handler(lambda c: c.data.startswith('view_cat_'), state=AppStates.VIEW_CAT)
async def view_cat(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2])
    cat_name = CATEGORIES[idx][1]
    logging.info(f"User {call.from_user.id} selected view category: {cat_name}.")
    await call.answer()
    
    await state.update_data(current_view_category=cat_name, current_category_idx=idx)
    await show_view_posts_page(call.message.chat.id, state, 0) # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    await state.set_state(AppStates.VIEW_LISTING)


async def show_view_posts_page(chat_id: int, state: FSMContext, offset: int = 0):
    logging.info(f"Showing view posts page for user {chat_id}, offset {offset}")
    try:
        data = await state.get_data()
        cat = data.get('current_view_category')

        if not cat:
            logging.error(f"Category not found in state for user {chat_id}")
            return await go_to_main_menu(chat_id, state)

        all_posts = get_posts_from_db() # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å—Ç–∏ –∑ –ë–î
        all_posts_in_category = [p for p in all_posts if p['category'] == cat]
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à—ñ (MongoDB –≤–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ)
        user_posts = all_posts_in_category

        if not user_posts:
            logging.info(f"No posts found for category '{cat}' for user {chat_id}")
            kb = InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="go_back_to_prev_step"),
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_back_to_main_menu")
            )
            text_to_send = f"–£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ¬´{escape_markdown_v2(cat)}¬ª –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–≥–æ–ª–æ—à–µ–Ω—å\\."
            return await update_or_send_interface_message(
                chat_id, state,
                text_to_send,
                kb, parse_mode='MarkdownV2'
            )

        await state.update_data(offset=offset)
        
        page_posts = user_posts[offset : offset + VIEW_POSTS_PER_PAGE] # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ VIEW_POSTS_PER_PAGE
        total_posts = len(user_posts)
        total_pages = (total_posts + VIEW_POSTS_PER_PAGE - 1) // VIEW_POSTS_PER_PAGE
        current_page = offset // VIEW_POSTS_PER_PAGE + 1
        
        full_text = (f"üìã **{escape_markdown_v2(cat)}** \\(–°—Ç–æ—Ä—ñ–Ω–∫–∞ {escape_markdown_v2(current_page)}/{escape_markdown_v2(total_pages)}\\)\n\n")
        
        combined_keyboard = InlineKeyboardMarkup(row_width=1) 

        for i, p in enumerate(page_posts):
            type_emoji = TYPE_EMOJIS.get(p['type'], '') 
            
            post_block = (f"ID: {escape_markdown_v2(p['id'])}\n" # –¢—É—Ç –∑–∞–ª–∏—à–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π ID
                         f"{escape_markdown_v2(type_emoji)} **{escape_markdown_v2(p['type'].capitalize())}**\n"
                         f"üîπ {escape_markdown_v2(p['description'])}\n") 
            
            if p['username']:
                if str(p['username']).isdigit(): # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ username —î –ø—Ä–æ—Å—Ç–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\_–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\\_\n"
                else:
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\@{escape_markdown_v2(p['username'])}\n"
            
            contact_info = p.get('contacts', '')
            if contact_info:
                post_block += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {escape_markdown_v2(contact_info)}\n"
            
            full_text += post_block
            
            if i < len(page_posts) - 1:
                full_text += "\n‚Äî\n\n" 

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        nav_row_page_footer = []
        if offset > 0:
            nav_row_page_footer.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"viewpage_{offset - VIEW_POSTS_PER_PAGE}"))
        if offset + VIEW_POSTS_PER_PAGE < total_posts:
            nav_row_page_footer.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=f"viewpage_{offset + VIEW_POSTS_PER_PAGE}"))
        
        if nav_row_page_footer:
            combined_keyboard.row(*nav_row_page_footer)
            
        combined_keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="go_back_to_prev_step"))
        combined_keyboard.add(InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_back_to_main_menu"))
        
        await update_or_send_interface_message(chat_id, state, full_text, combined_keyboard, parse_mode='MarkdownV2', disable_web_page_preview=True)

    except Exception as e:
        logging.error(f"Error in show_view_posts_page for user {chat_id}: {e}", exc_info=True)
        await update_or_send_interface_message(chat_id, state, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)
    
@dp.callback_query_handler(lambda c: c.data.startswith('viewpage_'), state=AppStates.VIEW_LISTING)
async def view_paginate(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} paginating view posts to offset {call.data.split('_')[1]}.")
    await call.answer()
    offset = int(call.data.split('_')[1])
    await show_view_posts_page(call.message.chat.id, state, offset)


# ======== –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data=='my_posts', state=AppStates.MAIN_MENU)
async def my_posts_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} pressed 'My Posts'.")
    await call.answer()
    await show_my_posts_page(call.message.chat.id, state, 0) # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    await state.set_state(AppStates.MY_POSTS_VIEW)


async def show_my_posts_page(chat_id: int, state: FSMContext, offset: int = 0):
    logging.info(f"Showing my posts page for user {chat_id}, offset {offset}")
    try:
        all_posts = get_posts_from_db() # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å—Ç–∏ –∑ –ë–î
        user_posts = sorted([p for p in all_posts if p['user_id'] == chat_id], key=lambda x: datetime.fromisoformat(x['created_at']), reverse=True)
        
        await state.update_data(offset=offset) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ offset –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

        if not user_posts:
            logging.info(f"No posts found for user {chat_id}")
            kb_no_posts = InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", callback_data="add_post"), 
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_back_to_main_menu")
            )
            return await update_or_send_interface_message(chat_id, state, "üßê –£ –≤–∞—Å –Ω–µ–º–∞—î –æ–≥–æ–ª–æ—à–µ–Ω—å\\.", kb_no_posts, parse_mode='MarkdownV2')

        page_posts = user_posts[offset : offset + MY_POSTS_PER_PAGE] 
        total_posts = len(user_posts)
        total_pages = (total_posts + MY_POSTS_PER_PAGE - 1) // MY_POSTS_PER_PAGE
        current_page = offset // MY_POSTS_PER_PAGE + 1
        
        full_text = f"üóÇÔ∏è **–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è** \\(–°—Ç–æ—Ä—ñ–Ω–∫–∞ {escape_markdown_v2(current_page)}/{escape_markdown_v2(total_pages)}\\)\n\n"
        
        combined_keyboard = InlineKeyboardMarkup(row_width=2) 

        for i, p in enumerate(page_posts):
            type_emoji = TYPE_EMOJIS.get(p['type'], '') 
            
            local_post_num = offset + i + 1
            
            post_block = (f"‚Ññ {escape_markdown_v2(local_post_num)}\n" 
                         f"{escape_markdown_v2(type_emoji)} **{escape_markdown_v2(p['type'].capitalize())}**\n"
                         f"üîπ {escape_markdown_v2(p['description'])}\n")
            
            if p['username']:
                if str(p['username']).isdigit(): # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ username —î –ø—Ä–æ—Å—Ç–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\_–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\\_\n"
                else:
                    post_block += f"üë§ –ê–≤—Ç–æ—Ä: \\@{escape_markdown_v2(p['username'])}\n"
            
            if p.get('contacts'):
                 post_block += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {escape_markdown_v2(p['contacts'])}\n"
            
            full_text += post_block
            
            post_kb_row = []
            if can_edit(p):
                post_kb_row.append(InlineKeyboardButton(f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚Ññ {local_post_num}", callback_data=f"edit_{p['id']}")) 
            post_kb_row.append(InlineKeyboardButton(f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ ‚Ññ {local_post_num}", callback_data=f"delete_{p['id']}")) 
            
            combined_keyboard.row(*post_kb_row)

            if i < len(page_posts) - 1:
                full_text += "\n‚Äî\n\n"

        nav_row_page_footer = []
        if offset > 0:
            nav_row_page_footer.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"mypage_{offset - MY_POSTS_PER_PAGE}"))
        if offset + MY_POSTS_PER_PAGE < total_posts: 
            nav_row_page_footer.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=f"mypage_{offset + MY_POSTS_PER_PAGE}"))
        
        if nav_row_page_footer: 
            combined_keyboard.row(*nav_row_page_footer)
            
        combined_keyboard.add(InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="go_back_to_main_menu"))
        
        await update_or_send_interface_message(chat_id, state, full_text, combined_keyboard, parse_mode='MarkdownV2', disable_web_page_preview=True)


    except Exception as e:
        logging.error(f"Error in show_my_posts_page for user {chat_id}: {e}", exc_info=True)
        await update_or_send_interface_message(chat_id, state, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∞—à–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)

@dp.callback_query_handler(lambda c: c.data.startswith('mypage_'), state=AppStates.MY_POSTS_VIEW)
async def my_posts_paginate(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} paginating my posts to offset {call.data.split('_')[1]}.")
    await call.answer()
    offset = int(call.data.split('_')[1])
    await show_my_posts_page(call.message.chat.id, state, offset)


# ======== –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data.startswith('edit_'), state=AppStates.MY_POSTS_VIEW)
async def edit_start(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} initiated edit for post {call.data.split('_')[1]}.")
    await call.answer()
    pid = call.data.split('_')[1] # ID —Ç–µ–ø–µ—Ä —Ä—è–¥–æ–∫
    post = get_post_by_id_from_db(pid) # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å—Ç –∑ –ë–î
    
    if not post or not can_edit(post):
        logging.warning(f"User {call.from_user.id} tried to edit expired or non-existent post {pid}.")
        return await call.answer("‚è∞ –ß–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (15 —Ö–≤) –≤–∏—á–µ—Ä–ø–∞–Ω–æ\\.", show_alert=True, parse_mode='MarkdownV2') 
        
    await state.update_data(edit_pid=pid)
    
    await update_or_send_interface_message(call.message.chat.id, state, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å (–¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤):", back_kb())
    await state.set_state(AppStates.EDIT_DESC)

@dp.message_handler(state=AppStates.EDIT_DESC)
async def process_edit(msg: types.Message, state: FSMContext):
    logging.info(f"User {msg.from_user.id} submitting new description for edit.")
    text = msg.text.strip()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await msg.delete()
    except MessageToDeleteNotFound:
        pass

    if not text or len(text) > 300:
        return await update_or_send_interface_message(msg.chat.id, state, f"‚ùå –ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∏–π –æ–ø–∏—Å \\(1\\-300 —Å–∏–º–≤–æ–ª—ñ–≤\\)\\.", back_kb(), parse_mode='MarkdownV2') 
        
    data = await state.get_data()
    pid = data['edit_pid']
    
    updated = update_post_description_in_db(pid, text) # –û–Ω–æ–≤–ª—é—î–º–æ –æ–ø–∏—Å –≤ –ë–î
    if updated:
        log_event(f"Edited {pid}")
        await update_or_send_interface_message(msg.chat.id, state, "‚úÖ –û–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ\\!", parse_mode='MarkdownV2')
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É "–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
        await show_my_posts_page(msg.chat.id, state, data.get('offset', 0))
        await state.set_state(AppStates.MY_POSTS_VIEW)
    else:
        await update_or_send_interface_message(msg.chat.id, state, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\.", main_kb(), parse_mode='MarkdownV2')
        await state.set_state(AppStates.MAIN_MENU)


# ======== –í–∏–¥–∞–ª–µ–Ω–Ω—è ========
@dp.callback_query_handler(lambda c: c.data.startswith('delete_'), state=AppStates.MY_POSTS_VIEW)
async def delete_post_handler(call: CallbackQuery, state: FSMContext): # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É
    logging.info(f"User {call.from_user.id} initiating delete for post {call.data.split('_')[1]}.")
    
    pid = call.data.split('_')[1] # ID —Ç–µ–ø–µ—Ä —Ä—è–¥–æ–∫
    user_id = call.from_user.id
    
    deleted = delete_post_from_db(pid, user_id) # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ë–î, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ user_id
    
    if not deleted:
        logging.warning(f"User {call.from_user.id} tried to delete non-existent or unauthorized post {pid}.")
        await call.answer("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–±–æ –≤–æ–Ω–æ –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–µ.", show_alert=True) 
        # –Ø–∫—â–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–µ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
        await show_my_posts_page(call.message.chat.id, state, (await state.get_data()).get('offset', 0))
        return

    log_event(f"Deleted {pid}")
    await call.answer("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.", show_alert=True) 

    data = await state.get_data()
    current_offset = data.get('offset', 0)
    
    # –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –æ—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    all_user_posts_after_delete = [p for p in get_posts_from_db() if p['user_id'] == user_id]
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π offset
    new_offset = current_offset
    
    # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π offset —Ç–µ–ø–µ—Ä –±—ñ–ª—å—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å
    # —ñ –ø—Ä–∏ —Ü—å–æ–º—É offset –Ω–µ –Ω—É–ª—å–æ–≤–∏–π, –ø–µ—Ä–µ–º—ñ—â–∞—î–º–æ—Å—å –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if new_offset >= len(all_user_posts_after_delete) and new_offset > 0:
        new_offset = max(0, new_offset - MY_POSTS_PER_PAGE)
    
    # –ó–∞–≤–∂–¥–∏ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    await update_or_send_interface_message(call.message.chat.id, state, "üóëÔ∏è –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ\\!", parse_mode='MarkdownV2')
    await show_my_posts_page(call.message.chat.id, state, new_offset)
    await state.set_state(AppStates.MY_POSTS_VIEW)


# ======== –î–æ–ø–æ–º–æ–≥–∞ ========
@dp.callback_query_handler(lambda c: c.data=='help', state=AppStates.MAIN_MENU)
async def help_handler(call: CallbackQuery, state: FSMContext):
    logging.info(f"User {call.from_user.id} requested help.")
    await call.answer()
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ @VILARSO18", url="https://t.me/VILARSO18"))
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–≤–∂–¥–∏ –≤–Ω–∏–∑—É
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_main_menu"))
    await update_or_send_interface_message(call.message.chat.id, state, "üí¨ –î–ª—è —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∞–±–æ –¥–æ–ø–æ–º–æ–≥–∏ –ø–∏—à—ñ—Ç—å \\@VILARSO18", kb, parse_mode='MarkdownV2') 
    await state.set_state(AppStates.MAIN_MENU) 

# ======== –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–º–∏–ª–æ–∫ ========
@dp.errors_handler()
async def err_handler(update, exception):
    logging.error(f"Update: {update} caused error: {exception}", exc_info=True)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ chat_id –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    chat_id = None
    if update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat.id
    elif update.message:
        chat_id = update.message.chat.id

    if chat_id:
        if isinstance(exception, (BadRequest, TelegramAPIError)):
            if "Can't parse entities" in str(exception):
                logging.error("Markdown parse error detected. Ensure all user-supplied text is escaped.")
                await update_or_send_interface_message(chat_id, dp.current_state(), "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Ç–µ–∫—Å—Ç—É\\\\. –ú–æ–∂–ª–∏–≤–æ, –≤ –æ–ø–∏—Å—ñ —î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏\\\\.", main_kb(), parse_mode='MarkdownV2')
                await dp.current_state().set_state(AppStates.MAIN_MENU)
                return True
            elif "Text must be non-empty" in str(exception):
                logging.error("Message text is empty error detected.")
                await update_or_send_interface_message(chat_id, dp.current_state(), "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞\\\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\\\\.", main_kb())
                await dp.current_state().set_state(AppStates.MAIN_MENU)
                return True
            elif "message is not modified" in str(exception): 
                logging.info("Message was not modified, skipping update.")
                return True 
    
    logging.critical(f"Unhandled error: {exception}", exc_info=True)
    return True

if __name__ == '__main__':
    logging.info("Starting bot...")
    executor.start_polling(dp, skip_updates=True)
